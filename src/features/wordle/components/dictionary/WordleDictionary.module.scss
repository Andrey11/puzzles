@import 'src/scss/mixins.module.scss';

$tooltip-bg: #2684ff;

// This hella silly, but .offcanvas.offcanvas-bottom keeps winning the specificity battle
#DictionaryOffcanvas {
  height: 80vh;
}

.DictionaryOffcanvasDisplay {
  [class="offcanvas-body"] {
    overflow-y: hidden;
    padding-top: 0;
  }
}

// Target react bootstrap component - but decided to go with override in custom.module.scss
// .DictionaryTooltip[id='tooltip-dictionary'] {
//   div[class*='tooltip-inner'] {
//     background-color: #2684ff;
//   }
// }

.DictionaryIcon {
  @include headerIconItem();
}

.SpinnerDisplay {
  display: flex;
  flex-direction: column;
  flex: 1;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.PuzzleDictionary {
  display: flex;
  flex-direction: column;
  min-height: calc(var(--vh, 1vh) * 100 - 100%);
  @include addHeightVH(75);
  width: 100%;
  max-width: 800px;
  flex: 1;
  gap: 16px;

  &ScrollListWrapper {
    padding: 0;
    position: relative;
    display: flex;
  }
}

.WordsContainer {
  display: flex;
  flex-direction: column;
  overflow: hidden;
  overflow-y: auto;
  flex: 1 1 100%;
}

.WordSearchRow {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 8px;
  padding: 1px; /* accomodate overlay due to overflow hidden is set on a parent */
  width: 70vw;
  &Icon {
    color: var(--mdc-theme-puzzle-secondary, #0c63e4);
  }
}

.WordErrorTooltip {
  font-family: 'Dosis', sans-serif !important;
  font-weight: 600 !important;
  font-size: medium;

  > [class*='tooltip-inner'] {
    background-color: #c50000;
    text-indent: 5px;
    color: white;
  }

  @include tooltipArrowColor(top, #c50000);
  @include tooltipArrowColor(right, #c50000);
  @include tooltipArrowColor(bottom, #c50000);
  @include tooltipArrowColor(left, #c50000);
}

.WordDefinition {
  margin-bottom: 0;

  &:last-child {
    border-bottom: 1px solid rgba(#2684ff, 0.2);
  }
  &Name {
    text-align: center;
    font-weight: 500;
    font-size: 22px;
    border-top: 1px solid rgba(#2684ff, 0.2);
    height: 45px;
    line-height: 45px;
    cursor: pointer;

    &[aria-expanded='true'] {
      // text-indent: 0;
      font-weight: 600;
      color: var(--mdc-theme-puzzle-secondary, #0c63e4);
    }

    &Error {
      cursor: not-allowed;
      font-weight: 400;
      opacity: 1;
      text-decoration: line-through;
    }
  }
  &Expanded {
    padding: 2px 4px;
    background-color: rgba(#2684ff, 0.04);
    border-radius: 5px;
    border: 1px solid rgba(#2684ff, 0.2);
    margin: -1px 30px 8px 0;
  }

  &Anchor {
    display: block;
    position: relative;
    top: -45px;
    visibility: hidden;
  }
}

.PhoneticCollection {
  display: flex;
  gap: 24px;
  margin: 4px 0;
  justify-content: center;
  align-items: center;
}

.Phonetics {
  svg {
    color: var(--mdc-theme-puzzle-secondary, #0c63e4);
  }
}

.PhoneticSpelling {
  color: var(--mdc-theme-puzzle-secondary, #0c63e4);
  padding-left: 8px;
  font-weight: 500;
}

.PartOfSpeach {
  font-weight: 400;
  font-size: 14px;

  hr {
    margin: 4px 0 8px 0;
    background-color: var(--mdc-theme-puzzle-secondary, #0c63e4);
  }

  ol {
    padding-left: 1rem;
    li {
      padding-left: 0.5rem;
      padding-bottom: 0.25rem;
    }
  }

  &Type {
    color: var(--mdc-theme-puzzle-secondary, #0c63e4);
    font-size: 16px;
    font-weight: 400;
    font-style: italic;
  }
}

.LicenseSection {
  font-weight: 300;
  font-size: 12px;
  text-align: center;
  svg {
    vertical-align: text-bottom;
  }
}
